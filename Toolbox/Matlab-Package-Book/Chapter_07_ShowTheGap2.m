% Figures - 7.2 and 7.3
% =========================================
% This program shows the actual performance of BP and OMP versus 
% the weak bounds we got for them - the noisy case


function [ErT,A]=Chapter_07_ShowTheGap2(n,m,delta,Smin,Sd,Smax,Experiments)

%==========================================
% 
%  The figure was generated by
%           [ErT,A]=Chapter_07_ShowTheGap2(100,200,0.1,1,1,70,100);
%==========================================

A=randn(n,m);
W=sqrt(diag(A'*A));
for k=1:1:m, 
    A(:,k)=A(:,k)/W(k); 
end; 
ErT=zeros(Smax-Smin+1,4);
hw=waitbar(0,'experimenting ...');

countT=length(Smin:Sd:Smax)*Experiments;
count=1;
for S=Smin:Sd:Smax,
    disp(['=======> ',num2str(S)]);
    Er=zeros(Experiments,4);
    for k=1:1:Experiments
        waitbar(count/countT);
        
        x0=GenerateX(m,S);
        x0=x0/norm(A*x0);
        Noise=randn(n,1); Noise=Noise/norm(Noise);
        b=A*x0+Noise*delta;
        
        [xLARS,lambdaLARS]=Chapter_05_LARS(A,b,0);
        xLARS=xLARS'; 
        choice=find(sqrt(mean((A*xLARS-b*ones(1,n)).^2,1))<=delta^2,1);
        xBP=xLARS(:,choice);
        % xBP=Basis_Pursuit_Denoising(b,A,delta^2); 
        Er(k,1)=mean((xBP-x0).^2)/delta^2; 
        Er(k,3)=mean((xBP-x0).^2)/mean(x0.^2);
        xMP=MatchingPursuit(A,b,delta);
        Er(k,2)=mean((xMP-x0).^2)/delta^2; 
        Er(k,4)=mean((xMP-x0).^2)/mean(x0.^2);
        count=count+1;
        % disp([nnz(sparse(abs(xBP)>1e-2)),nnz(sparse(abs(xMP)>1e-2))]);
    end;
    ErT(S-Smin+1,1)=mean(Er(:,1)); 
    ErT(S-Smin+1,2)=mean(Er(:,2)); 
    ErT(S-Smin+1,3)=mean(Er(:,3));
    ErT(S-Smin+1,4)=mean(Er(:,4));

    figure(1); clf;
    h=plot(Smin:Sd:Smax,ErT(1:Sd:end,1),'r'); hold on;
    set(h,'MarkerFaceColor','b');
    h=plot(Smin:Sd:Smax,ErT(1:Sd:end,2),'b');
    set(h,'MarkerFaceColor','b');
    h=xlabel('Cardinality of the solution'); set(h,'FontSize',16);
    h=ylabel('||x-x_0||^2/\epsilon^2'); set(h,'FontSize',16);
    h=legend({'Basis Pursuit','Matching Pursuit'},2);
    set(h,'FontSize',16);
    h=plot(Smin:Sd:Smax,ErT(1:Sd:end,2),'bo');
    set(h,'MarkerFaceColor','b');
    h=plot(Smin:Sd:Smax,ErT(1:Sd:end,1),'ro');
    set(h,'MarkerFaceColor','r');
    set(gca,'FontSize',16);
    grid on;
    axis([0 70 -0.1 0.6]);

    figure(2); clf;
    h=plot(Smin:Sd:Smax,ErT(1:Sd:end,3),'r'); hold on;
    set(h,'LineWidth',2);
    h=plot(Smin:Sd:Smax,ErT(1:Sd:end,4),'b');
    set(h,'LineWidth',2);
    h=xlabel('Cardinality of the solution'); set(h,'FontSize',16);
    h=ylabel('||x-x_0||^2/||x_0||^2'); set(h,'FontSize',16);
    h=legend({'Basis Pursuit','Matching Pursuit'},2);
    set(h,'FontSize',16);
    h=plot(Smin:Sd:Smax,ErT(1:Sd:end,4),'bo');
    set(h,'MarkerFaceColor','b');
    h=plot(Smin:Sd:Smax,ErT(1:Sd:end,3),'ro');
    set(h,'MarkerFaceColor','r');
    set(gca,'FontSize',16);
    grid on;
    axis([0 70 -0.1 1]);

    drawnow;
end;
close(hw); 

figure(1); clf;
h=plot(Smin:Sd:Smax,ErT(1:Sd:end,1),'r'); hold on;
set(h,'LineWidth',2);
h=plot(Smin:Sd:Smax,ErT(1:Sd:end,2),'b');
set(h,'LineWidth',2);
h=xlabel('Cardinality of the solution'); set(h,'FontSize',16);
h=ylabel('Relative L_2 Error'); set(h,'FontSize',16);
h=legend({'Basis Pursuit','Matching Pursuit'},1);
set(h,'FontSize',16);
h=plot(Smin:Sd:Smax,ErT(1:Sd:end,2),'bo');
set(h,'MarkerFaceColor','b');
h=plot(Smin:Sd:Smax,ErT(1:Sd:end,1),'ro');
set(h,'MarkerFaceColor','r');
set(gca,'FontSize',16);
grid on;
axis([0 70 -0.1 0.6]);
print -depsc2 Chapter_07_Comp2.eps

figure(2); clf;
h=plot(Smin:Sd:Smax,ErT(1:Sd:end,3),'r'); hold on;
set(h,'LineWidth',2);
h=plot(Smin:Sd:Smax,ErT(1:Sd:end,4),'b');
set(h,'LineWidth',2);
h=xlabel('Cardinality of the solution'); set(h,'FontSize',16);
h=ylabel('||x-x_0||^2/||x_0||^2'); set(h,'FontSize',16);
h=legend({'Basis Pursuit','Matching Pursuit'},2);
set(h,'FontSize',16);
h=plot(Smin:Sd:Smax,ErT(1:Sd:end,4),'bo');
set(h,'MarkerFaceColor','b');
h=plot(Smin:Sd:Smax,ErT(1:Sd:end,3),'ro');
set(h,'MarkerFaceColor','r');
set(gca,'FontSize',16);
grid on;
axis([0 70 -0.1 1]);
print -depsc2 Chapter_07_Comp2a.eps

%=================================================

function x=GenerateX(m,S)

x=zeros(m,1);
pos=randperm(m);
x(pos(1:S))=randn(S,1);
return;

%=================================================

function xMP=MatchingPursuit(A,b,delta)

[n,m]=size(A);
r=b;
SS=[];
while r'*r>delta^2,
    Z=(A'*r).^2;
    pos=find(Z==max(Z));
    SS=sort([SS,pos(1)]);
    r=b-A(:,SS)*pinv(A(:,SS))*b;    
end;
xMP=zeros(m,1);
xMP(SS)=pinv(A(:,SS))*b;
return;


%=========================================================

function [xest]=Basis_Pursuit_Denoising(S,D,Var,Iter,alpha,pow)

%=========================================================
% This function solves      Min ||x||_1 subject to: ||Dx-S||_2<Var
%
% Input:   N - size of the signal to be treated
%             S - the signal to decompose
%             D - the dictionary
%             Var - the error in representation
%             xinit - initialization result
%             Iter - Number of iterations in the IRLS
%             alpha - relaxation parameter
%             pow - the power to use in 
%
% Output: xest - the result of the minimization task
%
%
%=========================================================

if nargin==3, Iter=10; alpha=0.05; pow=12; end;
DD=D'*D;

[N,L]=size(D); lambda=1;
xest=IRLS(DD,D,lambda,S,alpha,ones(L,1),Iter);
Err=D*xest-S;

count=1;
Temp_Res=zeros(30,2);
Temp_Res(1,:)=[Err'*Err,1];

while abs(Err'*Err-Var)>1e-4 && count<50,
    Ratio=(Err'*Err)/Var;
    lambda=lambda*max(min(Ratio^pow,10),1.001);
    xest=IRLS(DD,D,lambda,S,alpha,ones(L,1),Iter);
    Err=D*xest-S;
    count=count+1;
    Temp_Res(count,:)=[Err'*Err,lambda];
    % disp([Err'*Err,lambda]);
end;

if count==30,
    pos=find(abs(Var-Temp_Res(:,1))==min(abs(Var-Temp_Res(:,1))));
    if abs(Temp_Res(pos(1),1)-Var)<1e-4, 
        lambda=Temp_Res(pos(1),2);
        xest=IRLS(DD,D,lambda,S,alpha,xtrue,Iter);
    else 
        xest=-1;
    end;
end;

return;

%=========================================================

function xest=IRLS(DD,D,lambda,S,alpha,xinit,Iter)

L=size(DD,1);
xest=xinit;
for k=1:1:Iter,
    Weight=spdiags(1./(abs(xest)+1e-8),0,L,L);
    xest=(1-alpha)*inv(Weight+lambda*DD)*lambda*D'*S+alpha*xest;
end;

return;
